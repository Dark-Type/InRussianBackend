openapi: 3.0.3
info:
  title: "InRussian API"
  version: "1.0.0"
  description: "API для проекта InRussian, которое используется для /домен вебсайта/ и приложения InRussian для Android и iOS."
servers:
  - url: "http://localhost:9080"
tags:
  - name: admin
    description: Маршруты для администраторов \(управление пользователями, статистика, контент\)
  - name: auth
    description: Аутентификация и авторизация пользователей \(регистрация, вход, выход\)
  - name: content
    description: Маршруты для управления контентом \(курсы, секции, темы, задачи, отчёты и медиафайлы\), требуется роль CONTENT_MANAGER
  - name: expert
    description: Маршруты для экспертов \(просмотр задач, проверка ответов, статистика\)
  - name: profile
    description: Маршруты для управления профилями пользователей \(создание, обновление, удаление профилей\)
  - name: student
    description: Маршруты для студентов \(курсы, задачи, прогресс, бейджи и др.\)

paths:
  /auth/student/register:
    post:
      tags: [ auth ]
      summary: Регистрация студента
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentRegisterRequest'
      responses:
        '201':
          description: Студент успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Ошибка регистрации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/staff/register:
    post:
      tags: [ auth ]
      summary: Регистрация сотрудника
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StaffRegisterRequest'
      responses:
        '201':
          description: Студент успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Ошибка регистрации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [ auth ]
      summary: Вход пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/refresh:
    post:
      summary: Обновить access-токен по refresh-токену
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Новый access-токен
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          description: Ошибка авторизации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/admin/create-initial:
    post:
      tags: [ auth ]
      summary: Создать начального администратора
      responses:
        '201':
          description: Администратор создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminCreatedResponse'
        '400':
          description: Ошибка создания администратора
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags: [ auth ]
      summary: Выход пользователя
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Успешный выход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /auth/me:
    get:
      tags: [ auth ]
      summary: Получить информацию о текущем пользователе
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'

  /admin/users/staff:
    post:
      tags: [ admin ]
      summary: Регистрация сотрудника
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StaffRegisterRequest'
      responses:
        '201':
          description: Сотрудник успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaffProfileResponse'
        '400':
          description: Ошибка регистрации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users:
    get:
      tags: [ admin ]
      summary: Получить список пользователей
      parameters:
        - name: page
          in: query
          required: false
          schema: { type: integer, default: 1 }
        - name: size
          in: query
          required: false
          schema: { type: integer, default: 20 }
        - name: role
          in: query
          required: false
          schema: { $ref: '#/components/schemas/UserRole' }
        - name: sortBy
          in: query
          required: false
          schema: { type: string, default: createdAt }
        - name: sortOrder
          in: query
          required: false
          schema: { type: string, enum: [ asc, desc ], default: desc }
        - name: createdFrom
          in: query
          required: false
          schema: { type: string, format: date }
        - name: createdTo
          in: query
          required: false
          schema: { type: string, format: date }
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfileResponse'
        '400':
          description: Ошибка получения пользователей
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users/count:
    get:
      tags: [ admin ]
      summary: Получить количество пользователей
      parameters:
        - name: role
          in: query
          required: false
          schema: { $ref: '#/components/schemas/UserRole' }
        - name: createdFrom
          in: query
          required: false
          schema: { type: string, format: date }
        - name: createdTo
          in: query
          required: false
          schema: { type: string, format: date }
      responses:
        '200':
          description: Количество пользователей
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
        '400':
          description: Ошибка получения количества
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users/{userId}:
    get:
      tags: [ admin ]
      summary: Получить пользователя по ID
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Данные пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [ admin ]
      summary: Обновить пользователя
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Пользователь обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          description: Ошибка обновления
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users/{userId}/status:
    put:
      tags: [ admin ]
      summary: Обновить статус пользователя
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/UserStatus'
      responses:
        '200':
          description: Статус обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Ошибка обновления статуса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users/{userId}/profile/user:
    post:
      tags: [ admin ]
      summary: Создать профиль пользователя
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserProfileRequest'
      responses:
        '201':
          description: Профиль создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          description: Ошибка создания профиля
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [ admin ]
      summary: Получить профиль пользователя
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '404':
          description: Профиль не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [ admin ]
      summary: Обновить профиль пользователя
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: Профиль обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          description: Ошибка обновления профиля
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [ admin ]
      summary: Удалить профиль пользователя
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Профиль удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Профиль не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/users/{userId}/profile/staff:
    post:
      tags: [ admin ]
      summary: Создать профиль сотрудника
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStaffProfileRequest'
      responses:
        '201':
          description: Профиль сотрудника создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaffProfileResponse'
        '400':
          description: Ошибка создания профиля
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [ admin ]
      summary: Получить профиль сотрудника
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Профиль сотрудника
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaffProfileResponse'
        '404':
          description: Профиль не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [ admin ]
      summary: Обновить профиль сотрудника
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStaffProfileRequest'
      responses:
        '200':
          description: Профиль обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaffProfileResponse'
        '400':
          description: Ошибка обновления профиля
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [ admin ]
      summary: Удалить профиль сотрудника
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Профиль удален
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: Профиль не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/statistics/students/overall:
    get:
      tags: [ admin ]
      summary: Получить общее количество студентов
      responses:
        '200':
          description: Общее количество студентов
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalStudents:
                    type: integer
        '400':
          description: Ошибка получения статистики
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/statistics/students/course/{courseId}:
    get:
      tags: [ admin ]
      summary: Получить количество студентов по курсу
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Количество студентов на курсе
          content:
            application/json:
              schema:
                type: object
                properties:
                  studentsCount:
                    type: integer
        '400':
          description: Ошибка получения статистики
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/statistics/course/{courseId}:
    get:
      tags: [ admin ]
      summary: Получить статистику по курсу
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Статистика по курсу
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Ошибка получения статистики
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/statistics/overall:
    get:
      tags: [ admin ]
      summary: Получить общую статистику
      responses:
        '200':
          description: Общая статистика
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Ошибка получения статистики
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /content/tasks:
    post:
      tags: [ content ]
      summary: Создать задачу
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201': { description: Задача создана }
        '400': { description: Ошибка создания }

  /content/tasks/{taskId}:
    get:
      tags: [ content ]
      summary: Получить задачу по ID
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Данные задачи }
        '404': { description: Задача не найдена }

    put:
      tags: [ content ]
      summary: Обновить задачу
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200': { description: Задача обновлена }
        '404': { description: Задача не найдена }

    delete:
      tags: [ content ]
      summary: Удалить задачу
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Задача удалена }
        '404': { description: Задача не найдена }

  /content/tasks/{taskId}/content:
    post:
      tags: [ content ]
      summary: Добавить контент к задаче
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskContentRequest'
      responses:
        '201': { description: Контент добавлен }
        '400': { description: Ошибка добавления }

  /content/tasks/{taskId}/content/{contentId}:
    get:
      tags: [ content ]
      summary: Получить контент задачи
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
        - name: contentId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Данные контента }
        '404': { description: Контент не найден }

    put:
      tags: [ content ]
      summary: Обновить контент задачи
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
        - name: contentId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskContentRequest'
      responses:
        '200': { description: Контент обновлён }
        '404': { description: Контент не найден }

    delete:
      tags: [ content ]
      summary: Удалить контент задачи
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
        - name: contentId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Контент удалён }
        '404': { description: Контент не найден }

  /content/tasks/{taskId}/answer:
    post:
      tags: [ content ]
      summary: Добавить ответ к задаче
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskAnswerRequest'
      responses:
        '201': { description: Ответ добавлен }
        '400': { description: Ошибка добавления }

    put:
      tags: [ content ]
      summary: Обновить ответ задачи
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskAnswerRequest'
      responses:
        '200': { description: Ответ обновлён }
        '404': { description: Ответ не найден }

    delete:
      tags: [ content ]
      summary: Удалить ответ задачи
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Ответ удалён }
        '404': { description: Ответ не найден }

  /content/tasks/{taskId}/options:
    post:
      tags: [ content ]
      summary: Добавить вариант ответа к задаче
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskAnswerOptionRequest'
      responses:
        '201': { description: Вариант добавлен }
        '400': { description: Ошибка добавления }

  /content/tasks/{taskId}/options/{optionId}:
    put:
      tags: [ content ]
      summary: Обновить вариант ответа
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
        - name: optionId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskAnswerOptionRequest'
      responses:
        '200': { description: Вариант обновлён }
        '404': { description: Вариант не найден }

    delete:
      tags: [ content ]
      summary: Удалить вариант ответа
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
        - name: optionId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Вариант удалён }
        '404': { description: Вариант не найден }

  /content/themes:
    post:
      tags: [ content ]
      summary: Создать тему
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThemeRequest'
      responses:
        '201': { description: Тема создана }
        '400': { description: Ошибка создания }

  /content/themes/{themeId}:
    get:
      tags: [ content ]
      summary: Получить тему по ID
      parameters:
        - name: themeId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Данные темы }
        '404': { description: Тема не найдена }

    put:
      tags: [ content ]
      summary: Обновить тему
      parameters:
        - name: themeId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateThemeRequest'
      responses:
        '200': { description: Тема обновлена }
        '404': { description: Тема не найдена }

    delete:
      tags: [ content ]
      summary: Удалить тему
      parameters:
        - name: themeId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Тема удалена }
        '404': { description: Тема не найдена }
  /content/themes/by-section/{sectionId}:
    get:
      tags: [ content ]
      summary: Получить темы по секции
      parameters:
        - name: sectionId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Список тем }
        '500': { description: Ошибка получения }
  /content/themes/{themeId}/tasks:
    get:
      tags: [ content ]
      summary: Получить задачи по теме
      parameters:
        - name: themeId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Список задач }
        '500': { description: Ошибка получения }

  /content/sections:
    post:
      tags: [ content ]
      summary: Создать секцию
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSectionRequest'
      responses:
        '201': { description: Секция создана }
        '400': { description: Ошибка создания }

  /content/sections/{sectionId}:
    get:
      tags: [ content ]
      summary: Получить секцию по ID
      parameters:
        - name: sectionId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Данные секции }
        '404': { description: Секция не найдена }

    put:
      tags: [ content ]
      summary: Обновить секцию
      parameters:
        - name: sectionId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSectionRequest'
      responses:
        '200': { description: Секция обновлена }
        '404': { description: Секция не найдена }

    delete:
      tags: [ content ]
      summary: Удалить секцию
      parameters:
        - name: sectionId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Секция удалена }
        '404': { description: Секция не найдена }
  /content/sections/by-course/{courseId}:
    get:
      tags: [ content ]
      summary: Получить секции по курсу
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Список секций }
        '500': { description: Ошибка получения }

  /content/courses:
    get:
      tags: [ content ]
      summary: Получить список всех курсов
      responses:
        '200': { description: Список курсов }
        '500': { description: Ошибка получения }

    post:
      tags: [ content ]
      summary: Создать курс
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseRequest'
      responses:
        '201': { description: Курс создан }
        '400': { description: Ошибка создания }

  /content/courses/{courseId}:
    get:
      tags: [ content ]
      summary: Получить курс по ID
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Данные курса }
        '404': { description: Курс не найден }

    put:
      tags: [ content ]
      summary: Обновить курс
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseRequest'
      responses:
        '200': { description: Курс обновлён }
        '404': { description: Курс не найден }

    delete:
      tags: [ content ]
      summary: Удалить курс
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Курс удалён }
        '404': { description: Курс не найден }

  /content/reports:
    get:
      tags: [ content ]
      summary: Получить все отчёты
      responses:
        '200': { description: Список отчётов }
        '500': { description: Ошибка получения }
    post:
      tags: [ content ]
      summary: Создать отчёт
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReportRequest'
      responses:
        '201': { description: Отчёт создан }
        '400': { description: Ошибка создания }

  /content/reports/{reportId}:
    get:
      tags: [ content ]
      summary: Получить отчёт по ID
      parameters:
        - name: reportId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Данные отчёта }
        '404': { description: Отчёт не найден }

    delete:
      tags: [ content ]
      summary: Удалить отчёт
      parameters:
        - name: reportId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Отчёт удалён }
        '404': { description: Отчёт не найден }

  /content/media:
    get:
      tags: [ content ]
      summary: Получить все медиафайлы
      responses:
        '200': { description: Список медиафайлов }
        '500': { description: Ошибка получения }
    post:
      tags: [ content ]
      summary: Загрузить медиафайл
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMediaFileRequest'
      responses:
        '201': { description: Медиафайл загружен }
        '400': { description: Ошибка загрузки }

  /content/media/{mediaId}:
    get:
      tags: [ content ]
      summary: Получить медиафайл по ID
      parameters:
        - name: mediaId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Данные медиафайла }
        '404': { description: Медиафайл не найден }

    put:
      tags: [ content ]
      summary: Обновить медиафайл
      parameters:
        - name: mediaId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMediaFileRequest'
      responses:
        '200': { description: Медиафайл обновлён }
        '404': { description: Медиафайл не найден }

    delete:
      tags: [ content ]
      summary: Удалить медиафайл
      parameters:
        - name: mediaId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Медиафайл удалён }
        '404': { description: Медиафайл не найден }
  /content/stats:
    get:
      tags: [ content ]
      summary: Получить статистику по контенту
      responses:
        '200': { description: Статистика }
        '500': { description: Ошибка получения }
  /content/stats/section/{sectionId}/tasks-count:
    get:
      tags: [ content ]
      summary: Получить количество задач в секции
      parameters:
        - name: sectionId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Количество задач }
        '500': { description: Ошибка получения }

  /content/stats/theme/{themeId}/tasks-count:
    get:
      tags: [ content ]
      summary: Получить количество задач в теме
      parameters:
        - name: themeId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Количество задач }
        '500': { description: Ошибка получения }

  /content/stats/course/{courseId}/tasks-count:
    get:
      tags: [ content ]
      summary: Получить количество задач в курсе
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Количество задач }
        '500': { description: Ошибка получения }
  /expert/students:
    get:
      tags: [ expert ]
      summary: Получить список студентов
      parameters:
        - name: page
          in: query
          required: false
          schema: { type: integer, default: 1 }
        - name: size
          in: query
          required: false
          schema: { type: integer, default: 20 }
        - name: sortBy
          in: query
          required: false
          schema: { type: string, default: createdAt }
        - name: sortOrder
          in: query
          required: false
          schema: { type: string, enum: [ asc, desc ], default: desc }
        - name: createdFrom
          in: query
          required: false
          schema: { type: string, format: date }
        - name: createdTo
          in: query
          required: false
          schema: { type: string, format: date }
      responses:
        '200': { description: Список студентов }
        '500': { description: Ошибка получения }

  /expert/students/count:
    get:
      tags: [ expert ]
      summary: Получить количество студентов
      parameters:
        - name: createdFrom
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: createdTo
          in: query
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Количество студентов
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
        '500':
          description: Ошибка получения
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /expert/students/with-profiles:
    get:
      tags: [ expert ]
      summary: Получить студентов с профилями
      parameters:
        - name: page
          in: query
          required: false
          schema: { type: integer, default: 1 }
        - name: size
          in: query
          required: false
          schema: { type: integer, default: 20 }
      responses:
        '200': { description: Список студентов с профилями }
        '500': { description: Ошибка получения }

  /expert/students/course/{courseId}:
    get:
      tags: [ expert ]
      summary: Получить студентов по курсу
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Список студентов курса }
        '500': { description: Ошибка получения }

  /expert/statistics/students/overall:
    get:
      tags: [ expert ]
      summary: Получить общее количество студентов
      responses:
        '200': { description: Общее количество студентов }
        '500': { description: Ошибка получения }

  /expert/statistics/students/course/{courseId}:
    get:
      tags: [ expert ]
      summary: Получить количество студентов по курсу
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Количество студентов на курсе }
        '500': { description: Ошибка получения }

  /expert/statistics/course/{courseId}/average-time:
    get:
      tags: [ expert ]
      summary: Получить среднее время прохождения курса
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Среднее время курса }
        '500': { description: Ошибка получения }

  /expert/statistics/course/{courseId}/average-progress:
    get:
      tags: [ expert ]
      summary: Получить средний прогресс курса
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Средний прогресс курса }
        '500': { description: Ошибка получения }

  /expert/statistics/overall-average-time:
    get:
      tags: [ expert ]
      summary: Получить общее среднее время прохождения
      responses:
        '200': { description: Общее среднее время }
        '500': { description: Ошибка получения }

  /expert/statistics/overall-average-progress:
    get:
      tags: [ expert ]
      summary: Получить общий средний прогресс
      responses:
        '200': { description: Общий средний прогресс }
        '500': { description: Ошибка получения }

  /expert/content/courses:
    get:
      tags: [ expert ]
      summary: Получить все курсы
      responses:
        '200': { description: Список курсов }
        '500': { description: Ошибка получения }

  /expert/content/courses/{courseId}:
    get:
      tags: [ expert ]
      summary: Получить курс по ID
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Данные курса }
        '400': { description: Не указан courseId }
        '404': { description: Курс не найден }
        '500': { description: Ошибка получения }

  /expert/content/reports:
    get:
      tags: [ expert ]
      summary: Получить все отчёты
      responses:
        '200': { description: Список отчётов }
        '500': { description: Ошибка получения }

  /expert/content/stats:
    get:
      tags: [ expert ]
      summary: Получить статистику по контенту
      responses:
        '200': { description: Статистика }
        '500': { description: Ошибка получения }
  /profiles/user:
    post:
      tags: [ profile ]
      summary: Создать профиль пользователя
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserProfileRequest'
      responses:
        '201':
          description: Профиль создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          description: Ошибка создания
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [ profile ]
      summary: Получить профиль пользователя
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '404':
          description: Профиль не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [ profile ]
      summary: Обновить профиль пользователя
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: Профиль обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          description: Ошибка обновления
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profiles/user/{id}:
    get:
      tags: [ profile ]
      summary: Получить профиль пользователя по ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '404':
          description: Профиль не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [ profile ]
      summary: Обновить профиль пользователя по ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: Профиль обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          description: Ошибка обновления
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profiles/user/language-skills:
    post:
      tags: [ profile ]
      summary: Добавить языковые навыки пользователя
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLanguageSkillRequest'
      responses:
        '201':
          description: Навыки добавлены
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
        '400':
          description: Ошибка добавления
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profiles/staff:
    post:
      tags: [ profile ]
      summary: Создать профиль сотрудника
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStaffProfileRequest'
      responses:
        '201':
          description: Профиль сотрудника создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaffProfileResponse'
        '400':
          description: Ошибка создания
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [ profile ]
      summary: Получить профиль сотрудника
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Профиль сотрудника
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaffProfileResponse'
        '404':
          description: Профиль не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [ profile ]
      summary: Обновить профиль сотрудника
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStaffProfileRequest'
      responses:
        '200':
          description: Профиль обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaffProfileResponse'
        '400':
          description: Ошибка обновления
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profiles/staff/{id}:
    get:
      tags: [ profile ]
      summary: Получить профиль сотрудника по ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Профиль сотрудника
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaffProfileResponse'
        '404':
          description: Профиль не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags: [ profile ]
      summary: Обновить профиль сотрудника по ID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStaffProfileRequest'
      responses:
        '200':
          description: Профиль обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaffProfileResponse'
        '400':
          description: Ошибка обновления
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /student/courses:
    get:
      tags: [ student ]
      summary: Получить курсы с языком, совпадающим с системным языком пользователя
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Список курсов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseListResponse'
        '500':
          description: Не удалось получить курсы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/courses/{courseId}/sections:
    get:
      tags: [ student ]
      summary: Получить секции курса
      security:
        - bearerAuth: [ ]
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Список секций
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionListResponse'
        '400':
          description: Не указан courseId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось получить секции
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/courses/{courseId}/themes:
    get:
      tags: [ student ]
      summary: Получить темы курса
      security:
        - bearerAuth: [ ]
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Список тем
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeListResponse'
        '400':
          description: Не указан courseId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось получить темы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/tasks/{taskId}/variants:
    get:
      tags: [ student ]
      summary: Получить варианты задачи
      security:
        - bearerAuth: [ ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Варианты задачи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskVariantListResponse'
        '400':
          description: Не указан taskId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось получить варианты задачи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



  /student/themes/{themeId}/tasks:
    get:
      tags: [ student ]
      summary: Получить задачи темы
      security:
        - bearerAuth: [ ]
      parameters:
        - name: themeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Список задач темы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        '400':
          description: Не указан themeId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось получить задачи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/tasks/{taskId}/content:
    get:
      tags: [ student ]
      summary: Получить весь контент задачи
      security:
        - bearerAuth: [ ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Контент задачи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskContentResponse'
        '400':
          description: Не указан taskId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось получить контент задачи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/tasks/{taskId}/query:
    get:
      tags: [ student ]
      summary: Получить query задачи
      security:
        - bearerAuth: [ ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Query задачи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskQueryResponse'
        '400':
          description: Не указан taskId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось получить query задачи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/badges:
    get:
      tags: [ student ]
      summary: Получить бейджи пользователя
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Список бейджей
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadgeListResponse'
        '500':
          description: Не удалось получить бейджи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [ student ]
      summary: Добавить бейдж пользователю
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBadgeRequest'
      responses:
        '200':
          description: Бейдж добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadgeResponse'
        '400':
          description: Не указан badgeId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось добавить бейдж
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/media:
    get:
      tags: [ student ]
      summary: Получить медиафайлы
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Список медиафайлов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaFileListResponse'
        '500':
          description: Не удалось получить медиафайлы
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/task-queue:
    get:
      tags: [ student ]
      summary: Получить очередь задач пользователя
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Очередь задач
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskQueueListResponse'
        '500':
          description: Не удалось получить очередь задач
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [ student ]
      summary: Добавить задачу в очередь
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskQueueRequest'
      responses:
        '200':
          description: Задача добавлена в очередь
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskQueueResponse'
        '500':
          description: Не удалось добавить задачу в очередь
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/task-queue/{queueId}/position:
    patch:
      tags: [ student ]
      summary: Обновить позицию задачи в очереди
      security:
        - bearerAuth: [ ]
      parameters:
        - name: queueId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskQueuePositionRequest'
      responses:
        '200':
          description: Позиция обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskQueueResponse'
        '400':
          description: Не указаны queueId или newPosition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось обновить позицию
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/task-queue/{queueId}:
    delete:
      tags: [ student ]
      summary: Удалить задачу из очереди
      security:
        - bearerAuth: [ ]
      parameters:
        - name: queueId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Задача удалена из очереди
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskQueueResponse'
        '400':
          description: Не указан queueId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось удалить задачу из очереди
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/task-queue/next:
    get:
      tags: [ student ]
      summary: Получить следующую задачу в очереди
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Следующая задача
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTaskQueueItem'
        '404':
          description: Следующая задача не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось получить следующую задачу
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/tasks/{taskId}/progress:
    post:
      tags: [ student ]
      summary: Создать прогресс задачи
      security:
        - bearerAuth: [ ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Прогресс задачи создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskProgressResponse'
        '404':
          description: Прогресс задачи не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось создать прогресс задачи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags: [ student ]
      summary: Получить прогресс задачи
      security:
        - bearerAuth: [ ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Прогресс задачи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskProgressResponse'
        '404':
          description: Прогресс задачи не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось получить прогресс задачи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags: [ student ]
      summary: Обновить прогресс задачи
      security:
        - bearerAuth: [ ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskProgressRequest'
      responses:
        '200':
          description: Прогресс задачи обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskProgressResponse'
        '404':
          description: Прогресс задачи не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось обновить прогресс задачи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /student/tasks/{taskId}/complete:
    post:
      tags: [ student ]
      summary: Отметить задачу как выполненную
      security:
        - bearerAuth: [ ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteTaskRequest'
      responses:
        '200':
          description: Задача отмечена как выполненная
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskProgressResponse'
        '404':
          description: Прогресс задачи не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось отметить задачу как выполненную
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /student/courses/{courseId}/enroll:
    post:
      tags: [ student ]
      summary: Записаться на курс
      security:
        - bearerAuth: [ ]
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Запись на курс успешна
          content:
            application/json:
              schema:
                type: boolean
        '404':
          description: Запись на курс не удалась
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось записаться на курс
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [ student ]
      summary: Отписаться от курса
      security:
        - bearerAuth: [ ]
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Отписка от курса успешна
          content:
            application/json:
              schema:
                type: boolean
        '404':
          description: Отписка от курса не удалась
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось отписаться от курса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/enrollments:
    get:
      tags: [ student ]
      summary: Получить все курсы пользователя
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Список курсов пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentListResponse'
        '404':
          description: Курсы пользователя не найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось получить курсы пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/sections/{sectionId}/progress:
    get:
      tags: [ student ]
      summary: Получить прогресс секции
      security:
        - bearerAuth: [ ]
      parameters:
        - name: sectionId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Прогресс секции
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionProgressResponse'
        '404':
          description: Прогресс секции не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось получить прогресс секции
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/courses/{courseId}/progress:
    get:
      tags: [ student ]
      summary: Получить прогресс курса
      security:
        - bearerAuth: [ ]
      parameters:
        - name: courseId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Прогресс курса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseProgressResponse'
        '404':
          description: Прогресс курса не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось получить прогресс курса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/media/{mediaId}:
    get:
      tags: [ student ]
      summary: Получить медиафайл по id
      security:
        - bearerAuth: [ ]
      parameters:
        - name: mediaId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Медиафайл
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaFile'
        '404':
          description: Медиафайл не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось получить медиафайл
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/tasks/{taskId}/report:
    post:
      tags: [ student ]
      summary: Создать отчёт на задачу
      security:
        - bearerAuth: [ ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReportRequest'
      responses:
        '201': { description: Отчёт создан }
        '404':
          description: Отчёт не создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось создать отчёт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /student/tasks/{taskId}/answer:
    get:
      tags: [ student ]
      summary: Получить ответ задачи
      security:
        - bearerAuth: [ ]
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Ответ задачи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskAnswerResponse'
        '404':
          description: Ответ задачи не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Не удалось получить ответ задачи
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    StaffRegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        phone:
          type: string
          nullable: true
        role:
          $ref: '#/components/schemas/UserRole'
        systemLanguage:
          $ref: '#/components/schemas/SystemLanguage'
      required: [ email, password, role ]
    UpdateUserRequest:
      type: object
      properties:
        phone:
          type: string
          nullable: true
        role:
          oneOf:
            - $ref: '#/components/schemas/UserRole'
            - type: 'null'
        systemLanguage:
          oneOf:
            - $ref: '#/components/schemas/SystemLanguage'
            - type: 'null'
        avatarId:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/UserStatus'
      required: [ status ]
    CreateUserProfileRequest:
      type: object
      properties:
        surname: { type: string }
        name: { type: string }
        patronymic: { type: string, nullable: true }
        gender: { $ref: '#/components/schemas/Gender' }
        dob: { type: string, format: date }
        dor: { type: string, format: date }
        citizenship: { type: string, nullable: true }
        nationality: { type: string, nullable: true }
        countryOfResidence: { type: string, nullable: true }
        cityOfResidence: { type: string, nullable: true }
        countryDuringEducation: { type: string, nullable: true }
        periodSpent:
          oneOf:
            - $ref: '#/components/schemas/PeriodSpent'
            - type: 'null'
        kindOfActivity: { type: string, nullable: true }
        education: { type: string, nullable: true }
        purposeOfRegister: { type: string, nullable: true }
      required: [ surname, name, gender, dob, dor ]
    UpdateUserProfileRequest:
      type: object
      properties:
        surname: { type: string, nullable: true }
        name: { type: string, nullable: true }
        patronymic: { type: string, nullable: true }
        gender:
          oneOf:
            - $ref: '#/components/schemas/Gender'
            - type: 'null'
        dob: { type: string, format: date, nullable: true }
        dor: { type: string, format: date, nullable: true }
        citizenship: { type: string, nullable: true }
        nationality: { type: string, nullable: true }
        countryOfResidence: { type: string, nullable: true }
        cityOfResidence: { type: string, nullable: true }
        countryDuringEducation: { type: string, nullable: true }
        periodSpent:
          oneOf:
            - $ref: '#/components/schemas/PeriodSpent'
            - type: 'null'
        kindOfActivity: { type: string, nullable: true }
        education: { type: string, nullable: true }
        purposeOfRegister: { type: string, nullable: true }
    CreateStaffProfileRequest:
      type: object
      properties:
        name: { type: string }
        surname: { type: string }
        patronymic: { type: string, nullable: true }
      required: [ name, surname ]
    UpdateStaffProfileRequest:
      type: object
      properties:
        name: { type: string, nullable: true }
        surname: { type: string, nullable: true }
        patronymic: { type: string, nullable: true }
    ErrorResponse:
      type: object
      properties:
        success: { type: boolean }
        error: { type: string }
        code: { type: integer, nullable: true }
        timestamp: { type: integer, format: int64 }
    MessageResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        timestamp: { type: integer, format: int64 }
    StaffProfileResponse:
      type: object
      properties:
        success: { type: boolean }
        profile: { $ref: '#/components/schemas/StaffProfile' }
        message: { type: string, nullable: true }
        timestamp: { type: integer, format: int64 }
    UserProfileResponse:
      type: object
      properties:
        success: { type: boolean }
        profile: { $ref: '#/components/schemas/UserProfile' }
        message: { type: string, nullable: true }
        timestamp: { type: integer, format: int64 }
    AdminCreatedResponse:
      type: object
      properties:
        success: { type: boolean }
        email: { type: string }
        message: { type: string }
        timestamp: { type: integer, format: int64 }
    UserRole:
      type: string
      enum: [ STUDENT, EXPERT, CONTENT_MODERATOR, ADMIN ]
    UserStatus:
      type: string
      enum: [ ACTIVE, SUSPENDED, DEACTIVATED, PENDING_VERIFICATION ]

    StaffProfile:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        surname:
          type: string
        patronymic:
          type: string
          nullable: true
      required: [ userId, name, surname ]

    UserProfile:
      type: object
      properties:
        userId:
          type: string
        surname:
          type: string
        name:
          type: string
        patronymic:
          type: string
          nullable: true
        gender:
          $ref: '#/components/schemas/Gender'
        dob:
          type: string
          format: date
        dor:
          type: string
          format: date
        citizenship:
          type: string
          nullable: true
        nationality:
          type: string
          nullable: true
        countryOfResidence:
          type: string
          nullable: true
        cityOfResidence:
          type: string
          nullable: true
        countryDuringEducation:
          type: string
          nullable: true
        periodSpent:
          nullable: true
        kindOfActivity:
          type: string
          nullable: true
        education:
          type: string
          nullable: true
        purposeOfRegister:
          type: string
          nullable: true
      required: [ userId, surname, name, gender, dob, dor ]

    Gender:
      type: string
      enum: [ MALE, FEMALE ]

    PeriodSpent:
      type: string
      enum:
        - MONTH_MINUS
        - SIX_MONTHS_MINUS
        - YEAR_MINUS
        - YEAR_PLUS
        - FIVE_YEAR_PLUS
        - NEVER

    SystemLanguage:
      type: string
      enum:
        - RUSSIAN
        - UZBEK
        - CHINESE
        - HINDI
        - TAJIK
        - ENGLISH
    StudentRegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        phone:
          type: string
          nullable: true
        systemLanguage:
          $ref: '#/components/schemas/SystemLanguage'
      required: [ email, password, systemLanguage ]
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          description: Refresh-токен для обновления access-токена
      required:
        - refreshToken
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required: [ email, password ]

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        accessToken:
          type: string
        refreshToken:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
              format: email
            role:
              type: string
            phone:
              type: string
              nullable: true
            systemLanguage:
              type: string
            status:
              type: string
          required: [ id, email, role, systemLanguage, status ]
        message:
          type: string
          nullable: true
        timestamp:
          type: integer
          format: int64
      required: [ success, accessToken, user, timestamp ]
    UserInfoData:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
      required: [ id, email, role ]

    UserInfoResponse:
      type: object
      properties:
        success:
          type: boolean
        user:
          $ref: '#/components/schemas/UserInfoData'
        message:
          type: string
          nullable: true
        timestamp:
          type: integer
          format: int64
      required: [ success, user, timestamp ]

    CreateTaskRequest:
      type: object
      properties:
        themeId: { type: string }
        name: { type: string }
        taskType: { type: string }
        question: { type: string }
        instructions: { type: string, nullable: true }
        isTraining: { type: boolean, default: false }
        orderNum: { type: integer }
      required: [ themeId, name, taskType, question, orderNum ]
    UpdateTaskRequest:
      type: object
      properties:
        name: { type: string, nullable: true }
        question: { type: string, nullable: true }
        instructions: { type: string, nullable: true }
        isTraining: { type: boolean, nullable: true }
        orderNum: { type: integer, nullable: true }

    CreateTaskContentRequest:
      type: object
      properties:
        contentType: { type: string }
        contentId: { type: string, nullable: true }
        description: { type: string, nullable: true }
        transcription: { type: string, nullable: true }
        translation: { type: string, nullable: true }
        orderNum: { type: integer }
      required: [ contentType, orderNum ]

    UpdateTaskContentRequest:
      type: object
      properties:
        contentType: { type: string, nullable: true }
        contentId: { type: string, nullable: true }
        description: { type: string, nullable: true }
        transcription: { type: string, nullable: true }
        translation: { type: string, nullable: true }
        orderNum: { type: integer, nullable: true }

    CreateTaskAnswerRequest:
      type: object
      properties:
        answerType: { type: string }
        correctAnswer: { type: object }
      required: [ answerType, correctAnswer ]

    UpdateTaskAnswerRequest:
      type: object
      properties:
        answerType: { type: string, nullable: true }
        correctAnswer: { type: object, nullable: true }

    CreateTaskAnswerOptionRequest:
      type: object
      properties:
        optionText: { type: string, nullable: true }
        optionAudioId: { type: string, nullable: true }
        isCorrect: { type: boolean, default: false }
        orderNum: { type: integer }
      required: [ orderNum ]

    UpdateTaskAnswerOptionRequest:
      type: object
      properties:
        optionText: { type: string, nullable: true }
        optionAudioId: { type: string, nullable: true }
        isCorrect: { type: boolean, nullable: true }
        orderNum: { type: integer, nullable: true }

    CreateThemeRequest:
      type: object
      properties:
        sectionId: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        orderNum: { type: integer }
      required: [ sectionId, name, orderNum ]

    UpdateThemeRequest:
      type: object
      properties:
        name: { type: string, nullable: true }
        description: { type: string, nullable: true }
        orderNum: { type: integer, nullable: true }

    CreateSectionRequest:
      type: object
      properties:
        courseId: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        orderNum: { type: integer }
      required: [ courseId, name, orderNum ]

    UpdateSectionRequest:
      type: object
      properties:
        name: { type: string, nullable: true }
        description: { type: string, nullable: true }
        orderNum: { type: integer, nullable: true }

    CreateCourseRequest:
      type: object
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        authorUrl: { type: string, nullable: true }
        language: { type: string }
        isPublished: { type: boolean, default: false }
      required: [ name, language ]

    UpdateCourseRequest:
      type: object
      properties:
        name: { type: string, nullable: true }
        description: { type: string, nullable: true }
        authorUrl: { type: string, nullable: true }
        language: { type: string, nullable: true }
        isPublished: { type: boolean, nullable: true }

    CreateReportRequest:
      type: object
      properties:
        description: { type: string }
        taskId: { type: string }
      required: [ description, taskId ]

    CreateMediaFileRequest:
      type: object
      properties:
        fileName:
          type: string
        fileType:
          type: string
        mimeType:
          type: string
        fileSize:
          type: integer
          format: int64
        uploadedBy:
          type: string
          nullable: true
        fileBlob:
          type: string
          format: byte
      required: [ fileName, fileType, mimeType, fileSize, fileBlob ]

    UpdateMediaFileRequest:
      type: object
      properties:
        fileName:
          type: string
          nullable: true
        fileType:
          type: string
          nullable: true
        mimeType:
          type: string
          nullable: true
        fileSize:
          type: integer
          format: int64
          nullable: true
        isActive:
          type: boolean
          nullable: true
        fileBlob:
          type: string
          format: byte
          nullable: true

    UserLanguageSkillRequest:
      type: object
      properties:
        language:
          type: string
        understands:
          type: boolean
        speaks:
          type: boolean
        reads:
          type: boolean
        writes:
          type: boolean
      required: [ language, understands, speaks, reads, writes ]
    Course:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        authorId:
          type: string
        authorUrl:
          type: string
        language:
          type: string
        isPublished:
          type: boolean
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - name
        - description
        - authorId
        - authorUrl
        - language
        - isPublished
        - createdAt
        - updatedAt

    CourseListResponse:
      type: array
      items:
        $ref: '#/components/schemas/Course'
    Section:
      type: object
      properties:
        id:
          type: string
        courseId:
          type: string
        name:
          type: string
        description:
          type: string
        orderNum:
          type: integer
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - courseId
        - name
        - description
        - orderNum
        - createdAt

    SectionListResponse:
      type: array
      items:
        $ref: '#/components/schemas/Section'
    Theme:
      type: object
      properties:
        id:
          type: string
        sectionId:
          type: string
        name:
          type: string
        description:
          type: string
        orderNum:
          type: integer
        createdAt:
          type: string
      required:
        - id
        - sectionId
        - name
        - description
        - orderNum
        - createdAt

    ThemeListResponse:
      type: array
      items:
        $ref: '#/components/schemas/Theme'
    TaskAnswerOptionItem:
      type: object
      properties:
        id:
          type: string
        taskId:
          type: string
        optionText:
          type: string
        optionAudioId:
          type: string
          nullable: true
        isCorrect:
          type: boolean
        orderNum:
          type: integer
      required:
        - id
        - taskId
        - optionText
        - isCorrect
        - orderNum

    TaskVariantListResponse:
      type: array
      items:
        $ref: '#/components/schemas/TaskAnswerOptionItem'
    TaskWithDetails:
      type: object
      properties:
        id:
          type: string
        themeId:
          type: string
        name:
          type: string
        taskType:
          type: string
        question:
          type: string
        instructions:
          type: string
        isTraining:
          type: boolean
        orderNum:
          type: integer
        createdAt:
          type: string
      required:
        - id
        - themeId
        - name
        - taskType
        - question
        - instructions
        - isTraining
        - orderNum
        - createdAt

    TaskListResponse:
      type: array
      items:
        $ref: '#/components/schemas/TaskWithDetails'
    TaskContentItem:
      type: object
      properties:
        id:
          type: string
        taskId:
          type: string
        contentType:
          type: string
        contentId:
          type: string
        description:
          type: string
        transcription:
          type: string
        translation:
          type: string
        orderNum:
          type: integer
      required:
        - id
        - taskId
        - contentType
        - contentId
        - orderNum

    TaskContentResponse:
      type: array
      items:
        $ref: '#/components/schemas/TaskContentItem'

    TaskQueryResponse:
      oneOf:
        - $ref: '#/components/schemas/TaskWithDetails'
        - type: 'null'
    Badge:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        iconUrl:
          type: string
        badgeType:
          type: string
        criteria:
          type: string
        createdAt:
          type: string
      required:
        - id
        - name
        - description
        - iconUrl
        - badgeType
        - criteria
        - createdAt

    BadgeListResponse:
      type: array
      items:
        $ref: '#/components/schemas/Badge'

    CreateBadgeRequest:
      type: object
      properties:
        badgeId:
          type: string
        courseId:
          type: string
          nullable: true
        themeId:
          type: string
          nullable: true
      required:
        - badgeId

    BadgeResponse:
      $ref: '#/components/schemas/Badge'
    MediaFile:
      type: object
      properties:
        id:
          type: string
        fileName:
          type: string
        fileType:
          type: string
        mimeType:
          type: string
        fileSize:
          type: integer
        uploadedBy:
          type: string
          nullable: true
        uploadedAt:
          type: string
          format: date-time
        isActive:
          type: boolean
        fileBlob:
          type: string
          format: byte
      required:
        - id
        - fileName
        - fileType
        - mimeType
        - fileSize
        - uploadedAt
        - isActive
        - fileBlob
    MediaFileListResponse:
      type: array
      items:
        $ref: '#/components/schemas/MediaFile'

    CreateTaskQueueRequest:
      type: object
      properties:
        userId:
          type: string
        taskId:
          type: string
        themeId:
          type: string
        sectionId:
          type: string
        queuePosition:
          type: integer
        isOriginalTask:
          type: boolean
          default: true
        isRetryTask:
          type: boolean
          default: false
        originalTaskId:
          type: string
          nullable: true
      required:
        - userId
        - taskId
        - themeId
        - sectionId
        - queuePosition

    TaskQueueResponse:
      $ref: '#/components/schemas/UserTaskQueueItem'

    UserTaskQueueItem:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        taskId:
          type: string
        themeId:
          type: string
        sectionId:
          type: string
        queuePosition:
          type: integer
        isOriginalTask:
          type: boolean
        isRetryTask:
          type: boolean
        originalTaskId:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - taskId
        - themeId
        - sectionId
        - queuePosition
        - isOriginalTask
        - isRetryTask
        - createdAt

    TaskQueueListResponse:
      type: array
      items:
        $ref: '#/components/schemas/UserTaskQueueItem'

    UpdateTaskQueuePositionRequest:
      type: object
      properties:
        newPosition:
          type: integer
          description: Новая позиция задачи в очереди
      required:
        - newPosition
    TaskProgressResponse:
      type: object
      properties:
        userId:
          type: string
        taskId:
          type: string
        status:
          type: string
        attemptCount:
          type: integer
        isCorrect:
          type: boolean
          nullable: true
        lastAttemptAt:
          type: string
          format: date-time
          nullable: true
        completedAt:
          type: string
          format: date-time
          nullable: true
        shouldRetryAfterTasks:
          type: integer
          nullable: true
      required:
        - userId
        - taskId
        - status
        - attemptCount

    UpdateTaskProgressRequest:
      type: object
      properties:
        status:
          type: string
          nullable: true
        attemptCount:
          type: integer
          nullable: true
        isCorrect:
          type: boolean
          nullable: true
        shouldRetryAfterTasks:
          type: integer
          nullable: true
    CompleteTaskRequest:
      type: object
      properties:
        isCorrect:
          type: boolean
          description: Верно ли выполнена задача
      required:
        - isCorrect
    EnrollmentListResponse:
      type: object
      properties:
        enrollments:
          type: array
          items:
            $ref: '#/components/schemas/UserCourseEnrollmentItem'
      required:
        - enrollments

    UserCourseEnrollmentItem:
      type: object
      properties:
        userId:
          type: string
        courseId:
          type: string
        enrolledAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
          nullable: true
        progress:
          type: number
          format: double
      required:
        - userId
        - courseId
        - enrolledAt
        - progress
    SectionProgressResponse:
      type: object
      properties:
        sectionId:
          type: string
        totalTasks:
          type: integer
        completedTasks:
          type: integer
        progressPercentage:
          type: number
          format: double
      required:
        - sectionId
        - totalTasks
        - completedTasks
        - progressPercentage
    CourseProgressResponse:
      type: object
      properties:
        courseId:
          type: string
        totalTasks:
          type: integer
        completedTasks:
          type: integer
        progressPercentage:
          type: number
          format: double
        sectionsProgress:
          type: array
          items:
            $ref: '#/components/schemas/SectionProgressResponse'
      required:
        - courseId
        - totalTasks
        - completedTasks
        - progressPercentage
        - sectionsProgress
    TaskAnswerResponse:
      type: object
      properties:
        taskId:
          type: string
        answerType:
          type: string
        correctAnswer:
          type: string
      required:
        - taskId
        - answerType
        - correctAnswer

